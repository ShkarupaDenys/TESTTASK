{"ast":null,"code":"import { Errors } from 'types';\nexport const API = 'https://frontend-test-assignment-api.abz.agency';\nfunction request(url) {\n  let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';\n  let data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let token = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  const options = {\n    method\n  };\n  if (data) {\n    options.body = data;\n    options.headers = {\n      Token: token\n    };\n  }\n  return fetch(API + url, options).then(response => {\n    if (response.status === 409) {\n      throw new Error(Errors.status409).message;\n    }\n    if (!response.headers.get('content-type').includes('application/json')) {\n      throw new Error('Content type is not supported.');\n    }\n    if (response.status === 404) {\n      throw new Error('Page not found');\n    }\n    if (!response.ok) {\n      throw new Error('Something went wrong.');\n    }\n    return response.json();\n  });\n}\nexport const client = {\n  get: url => request(url),\n  post: (url, formData, token) => {\n    return request(url, 'POST', formData, token);\n  }\n};","map":{"version":3,"names":["Errors","API","request","url","method","arguments","length","undefined","data","token","options","body","headers","Token","fetch","then","response","status","Error","status409","message","get","includes","ok","json","client","post","formData"],"sources":["/Users/shkarupadenis/Documents/personal/TESTTASK/src/utils/fetchClient.ts"],"sourcesContent":["import { Errors } from 'types';\n\nexport const API = 'https://frontend-test-assignment-api.abz.agency';\n\ntype RequestMethod = 'GET' | 'POST';\n\nfunction request(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: FormData = null,\n  token = '',\n) {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = data;\n    options.headers = {\n      Token: token,\n    };\n  }\n\n  return fetch(API + url, options)\n    .then(response => {\n      if (response.status === 409) {\n        throw new Error(Errors.status409).message;\n      }\n\n      if (!response.headers.get('content-type').includes('application/json')) {\n        throw new Error('Content type is not supported.');\n      }\n\n      if (response.status === 404) {\n        throw new Error('Page not found');\n      }\n\n      if (!response.ok) {\n        throw new Error('Something went wrong.');\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: (url: string) => request(url),\n  post: (url: string, formData: FormData, token: string) => {\n    return request(url, 'POST', formData, token);\n  },\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,OAAO;AAE9B,OAAO,MAAMC,GAAG,GAAG,iDAAiD;AAIpE,SAASC,OAAOA,CACdC,GAAW,EAIX;EAAA,IAHAC,MAAqB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAAA,IAC7BG,IAAc,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAAA,IACrBI,KAAK,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAEV,MAAMK,OAAoB,GAAG;IAAEN;EAAO,CAAC;EAEvC,IAAII,IAAI,EAAE;IACRE,OAAO,CAACC,IAAI,GAAGH,IAAI;IACnBE,OAAO,CAACE,OAAO,GAAG;MAChBC,KAAK,EAAEJ;IACT,CAAC;EACH;EAEA,OAAOK,KAAK,CAACb,GAAG,GAAGE,GAAG,EAAEO,OAAO,CAAC,CAC7BK,IAAI,CAACC,QAAQ,IAAI;IAChB,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MAC3B,MAAM,IAAIC,KAAK,CAAClB,MAAM,CAACmB,SAAS,CAAC,CAACC,OAAO;IAC3C;IAEA,IAAI,CAACJ,QAAQ,CAACJ,OAAO,CAACS,GAAG,CAAC,cAAc,CAAC,CAACC,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MACtE,MAAM,IAAIJ,KAAK,CAAC,gCAAgC,CAAC;IACnD;IAEA,IAAIF,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MAC3B,MAAM,IAAIC,KAAK,CAAC,gBAAgB,CAAC;IACnC;IAEA,IAAI,CAACF,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIL,KAAK,CAAC,uBAAuB,CAAC;IAC1C;IAEA,OAAOF,QAAQ,CAACQ,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC;AACN;AAEA,OAAO,MAAMC,MAAM,GAAG;EACpBJ,GAAG,EAAGlB,GAAW,IAAKD,OAAO,CAACC,GAAG,CAAC;EAClCuB,IAAI,EAAEA,CAACvB,GAAW,EAAEwB,QAAkB,EAAElB,KAAa,KAAK;IACxD,OAAOP,OAAO,CAACC,GAAG,EAAE,MAAM,EAAEwB,QAAQ,EAAElB,KAAK,CAAC;EAC9C;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}