{"ast":null,"code":"import Resizer from 'react-image-file-resizer';\nexport const isEmail = email => {\n  // eslint-disable-next-line max-len, no-control-regex\n  return /^([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22))*\\x40([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d))*$/.test(email);\n};\nexport const resizeFile = file => new Promise(resolve => {\n  Resizer.imageFileResizer(file, 75, 75, 'JPEG', 100, 0, uri => {\n    resolve(uri);\n  }, 'file', 75, 75);\n});\nexport const optimizePnone = phone => {\n  return phone.replaceAll(' ', '').replaceAll('-', '').replaceAll('(', '').replaceAll(')', '');\n};\nexport const cutName = name => name.split('-')[0];\nexport const hasError = (fields, name) => {\n  return fields.find(item => item === `${name}-empty` || item === `${name}-invalid`);\n};\nexport const handleErrorMessage = (errorName, name) => {\n  const type = errorName === null || errorName === void 0 ? void 0 : errorName.split('-')[1];\n  switch (type) {\n    case 'empty':\n      return `The ${name} field is required`;\n    case 'invalid':\n      switch (name) {\n        case 'name':\n          return `The ${name} should be 2-60 characters`;\n        case 'email':\n          return `The ${name} is not valid`;\n        case 'photo':\n          return `The ${name} size must not exceed 5MB`;\n        case 'phone':\n          return `The ${name} should be +38 (XXX) XXX - XX - XX`;\n      }\n      return '';\n  }\n};","map":{"version":3,"names":["Resizer","isEmail","email","test","resizeFile","file","Promise","resolve","imageFileResizer","uri","optimizePnone","phone","replaceAll","cutName","name","split","hasError","fields","find","item","handleErrorMessage","errorName","type"],"sources":["/Users/shkarupadenis/Documents/personal/TESTTASK/src/utils/helpers.ts"],"sourcesContent":["import Resizer from 'react-image-file-resizer';\n\nexport const isEmail = (email: string) => {\n  // eslint-disable-next-line max-len, no-control-regex\n  return /^([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22))*\\x40([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d))*$/.test(\n    email,\n  );\n};\n\nexport const resizeFile = (file: File) => new Promise((resolve) => {\n  Resizer.imageFileResizer(\n    file,\n    75,\n    75,\n    'JPEG',\n    100,\n    0,\n    (uri) => {\n      resolve(uri);\n    },\n    'file',\n    75,\n    75,\n  );\n});\n\nexport const optimizePnone = (phone: string) => {\n  return phone\n    .replaceAll(' ', '')\n    .replaceAll('-', '')\n    .replaceAll('(', '')\n    .replaceAll(')', '');\n};\n\nexport const cutName = (name: string) => name.split('-')[0];\n\nexport const hasError = (fields: string[], name: string) => {\n  return fields.find(\n    item => (item === `${name}-empty`) || (item === `${name}-invalid`),\n  );\n};\n\nexport const handleErrorMessage = (errorName: string, name: string) => {\n  const type = errorName?.split('-')[1];\n\n  switch (type) {\n    case 'empty':\n      return `The ${name} field is required`;\n\n    case 'invalid':\n      switch (name) {\n        case 'name':\n          return `The ${name} should be 2-60 characters`;\n\n        case 'email':\n          return `The ${name} is not valid`;\n\n        case 'photo':\n          return `The ${name} size must not exceed 5MB`;\n\n        case 'phone':\n          return `The ${name} should be +38 (XXX) XXX - XX - XX`;\n      }\n\n      return '';\n  }\n};\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,0BAA0B;AAE9C,OAAO,MAAMC,OAAO,GAAIC,KAAa,IAAK;EACxC;EACA,OAAO,ggBAAggB,CAACC,IAAI,CAC1gBD,KACF,CAAC;AACH,CAAC;AAED,OAAO,MAAME,UAAU,GAAIC,IAAU,IAAK,IAAIC,OAAO,CAAEC,OAAO,IAAK;EACjEP,OAAO,CAACQ,gBAAgB,CACtBH,IAAI,EACJ,EAAE,EACF,EAAE,EACF,MAAM,EACN,GAAG,EACH,CAAC,EACAI,GAAG,IAAK;IACPF,OAAO,CAACE,GAAG,CAAC;EACd,CAAC,EACD,MAAM,EACN,EAAE,EACF,EACF,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAMC,aAAa,GAAIC,KAAa,IAAK;EAC9C,OAAOA,KAAK,CACTC,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC,CACnBA,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC,CACnBA,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC,CACnBA,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC;AACxB,CAAC;AAED,OAAO,MAAMC,OAAO,GAAIC,IAAY,IAAKA,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAE3D,OAAO,MAAMC,QAAQ,GAAGA,CAACC,MAAgB,EAAEH,IAAY,KAAK;EAC1D,OAAOG,MAAM,CAACC,IAAI,CAChBC,IAAI,IAAKA,IAAI,KAAM,GAAEL,IAAK,QAAO,IAAMK,IAAI,KAAM,GAAEL,IAAK,UAC1D,CAAC;AACH,CAAC;AAED,OAAO,MAAMM,kBAAkB,GAAGA,CAACC,SAAiB,EAAEP,IAAY,KAAK;EACrE,MAAMQ,IAAI,GAAGD,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEN,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAErC,QAAQO,IAAI;IACV,KAAK,OAAO;MACV,OAAQ,OAAMR,IAAK,oBAAmB;IAExC,KAAK,SAAS;MACZ,QAAQA,IAAI;QACV,KAAK,MAAM;UACT,OAAQ,OAAMA,IAAK,4BAA2B;QAEhD,KAAK,OAAO;UACV,OAAQ,OAAMA,IAAK,eAAc;QAEnC,KAAK,OAAO;UACV,OAAQ,OAAMA,IAAK,2BAA0B;QAE/C,KAAK,OAAO;UACV,OAAQ,OAAMA,IAAK,oCAAmC;MAC1D;MAEA,OAAO,EAAE;EACb;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}